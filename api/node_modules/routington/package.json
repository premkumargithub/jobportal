{
  "name": "routington",
  "description": "Trie-based URL Routing",
  "version": "0.1.3",
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "matcha": "*"
  },
  "scripts": {
    "test": "make test"
  },
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonathanong/routington.git"
  },
  "bugs": {
    "url": "https://github.com/jonathanong/routington/issues",
    "email": "me@jongleberry.com"
  },
  "license": "MIT",
  "readme": "## Routington [![Build Status](https://travis-ci.org/jonathanong/routington.png)](https://travis-ci.org/jonathanong/routington)\n\nRoutington is a [trie](http://en.wikipedia.org/wiki/Trie)-based URL router.\nIts goal is only to define and match URLs.\nIt does not handle methods, headers, controllers, views, etc., in anyway.\nIt is faster than traditional, linear, regular expression-matching routers, although insignficantly,\nand scales with the number of routes.\n\nThe purpose of this router isn't for performance,\nbut to bring more structure to URL routing.\nThe intention is for you to build a framework on top either in node.js or in the browser.\n\nImplementations:\n\n  - [koa-trie-router](https://github.com/koajs/trie-router) - for [koa](https://github.com/koajs)\n\n### API\n\n#### node Node = Routington()\n\n```js\nvar routington = require('routington')\nvar router = routington()\n```\n\n`router` is the root `Node` in the trie. All `node`s will have `router` as furthest ancestor.\n\n#### Node\n\nEvery node on a tree is an instance of `Node`. You only construct the root. A `node` has the following properties:\n\n- `child {}Node` - String based child definitions.\n  For example, `node.child['post']` will return a child node with `node.string === 'post'`\n- `children []Node` - Name/regex based child definitions\n- `parent Node` - The parent of the node\n- `name` - Name of the node (for parameter matching)\n- `string` - String to match the URL fragment\n- `regex` - Regular expression to match the URL fragment\n\n#### nodes []Node = router.define(route)\n\n```js\nvar nodes = routington.define('/:identity(page|petition)/:id([0-9a-f]{24})')\n```\n\n- `route` is a definition of a route and is an extension of Express' routing syntax.\n  `route`, however, can only be a string.\n- `nodes` is an array of `node`s.\n\nEach fragment of the route, delimited by a `/`, can have the following signature:\n\n- `string` - ex `/post`\n- `string|string` - `|` separated strings, ex `/post|page`\n- `:name` - Wildcard route matched to a name\n- `(regex)` - A regular expression match without saving the parameter (not recommended)\n- `:name(regex)`- Named regular expression match\n\nYou should always name your regular expressions otherwise you can't use the captured value.\nThe regular expression is built using `new RegExp('^(' + regex + ')$', 'i')`,\nso you need to escape your string, ie `\\\\w`.\nYou can always pre-define names or regular expressions before. For example, I can define:\n\n```js\nrouter.define('/page/:id(\\\\w{3,30})')\n\n// later, :id will have the same regexp\n// so you don't have to repeat yourself\nrouter.define('/page/:id/things')\n```\n\n#### match {} = router.match(url)\n\n```js\nrouter.define('/page/:id(\\\\w{3,30})')\nvar match = router.match('/page/taylorswift')\n```\n\n`match`, unless `null`, will be an object with the following properties:\n\n- `param` - A list of named parameters, ex, `match.param.id === 'taylorswift'`.\n- `node` - The matched node.\n  Will always have `name.string === ''`.\n\n### Building a Router on top of Routington\n\nEach URL you define creates a node,\nand you are free to do whatever you'd like with each node as long you don't overwrite any prototype properties (basically just `define`, `match`, and `parse`).\nAdding any features to routington shouldn't be necessary.\n\nFor example, suppose you want to attach callbacks to a node by extending routington:\n\n```js\nrouter.get('/:id/:controller', function (req, res, next) {\n  console.log('do something')\n})\n```\n\nYou can attach the middleware to a `node.GET` array:\n\n```js\nrouter.get = function (path, handler) {\n  var node = router.define(path)[0]\n  node.GET = node.GET || []\n  node.GET.push(handler)\n}\n```\n\nNow, dispatching is easy:\n\n```js\nfunction dispatcher(req, res, next) {\n  var match = router.match(url.parse(req.url).pathname)\n  if (!match)\n    // this is a 404\n\n  var node = match.node\n  var callbacks = node[req.method]\n  if (!callbacks)\n    // this is a 405\n\n  // execute all the callbacks.\n  // async.series won't actually work here,\n  // but you get the point.\n  async.series(callbacks, next)\n}\n```\n\nProperties attached to the node will be exposed on the match.\nFor example,\nsuppose you wanted to label a node:\n\n```js\nvar node = router.define('/:id/:controller')[0]\nnode.label = 'controller'\n```\n\nWhen matched, it will be available via `match.node.label`:\n\n```js\nvar match = router.match('/someid/somecontroller')\nassert(match.node.label === 'label')\n```\n\nSince reaching into `match.node` is a little inconvenient and you probably don't want your end users to touch it,\nyou should expose in your dispatcher:\n\n```js\nvar match = router.match(url.parse(req.url).pathname)\n\n// ...\n\nreq.param = match.param\nreq.label = match.node.label\n```\n\n### Browser Support\n\nIE9+\n\n### License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Jonathan Ong me@jongleberry.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jonathanong/routington",
  "_id": "routington@0.1.3",
  "dist": {
    "shasum": "6e1c9f4ba7c1ce9df2b217d00752a9bce86f6287"
  },
  "_from": "routington@",
  "_resolved": "http://registry.npmjs.org/routington/-/routington-0.1.3.tgz"
}
